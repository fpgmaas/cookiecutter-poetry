PYTHON_VERSION := {{cookiecutter.python_version}}

install: ## Install the poetry environment
	@echo "ðŸš€ Creating virtual environment using pyenv and poetry"
	@poetry install	
	@poetry shell

format: ## Format code using isort and black.
	@echo "ðŸš€ Formatting code: Running isort and black"
	@isort .
	@black .

lint: ## Check code formatting using isort, black, and flake8.
	@echo "ðŸš€ Checking code formatting: Running black, isort and flake8"
	@isort --check-only --diff .
	@black --check .
	@flake8 .

test: ## Test the code with pytest
	@echo "ðŸš€ Testing code: Running pytest"
	@pytest --doctest-modules

build: clean-build ## Build wheel file using poetry
	@echo "ðŸš€ Creating wheel file"
	@poetry build

clean-build: ## clean build artifacts
	@rm -rf dist

{% if cookiecutter.deploy_to == "pypi" -%}
publish: ## publish a release to pypi.
	@echo "ðŸš€ Publishing: Dry run."
	@poetry config pypi-token.pypi $(PYPI_TOKEN)
	@poetry publish --dry-run
	@echo "ðŸš€ Publishing."
	@poetry publish

build-and-publish: build publish ## Build and publish.
{%- elif cookiecutter.deploy_to == "artifactory" -%}
publish: ## Publish to the Artifactory repository using poetry. Requires ARTIFACTORY_TOKEN for DPS-FF-ILO to be set.
	@echo "ðŸš€ Publishing: Dry run."
	@poetry config repositories.artifactory $(ARTIFACTORY_URL)
	@poetry publish --repository artifactory --username $(ARTIFACTORY_USERNAME) --password $(ARTIFACTORY_PASSWORD) --dry-run
	@echo "ðŸš€ Publishing."
	@poetry publish --repository artifactory --username $(ARTIFACTORY_USERNAME) --password $(ARTIFACTORY_PASSWORD)

build-and-publish: build publish ## Build and publish.
{%- endif %}

.PHONY: help

help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

.DEFAULT_GOAL := help