[tool.poetry]
name = "{{cookiecutter.project_slug}}"
version = "0.0.1"
description = "{{cookiecutter.project_description}}"
authors = ["{{cookiecutter.author}} <f{{cookiecutter.email}}>"]
repository = "https://github.com/partsnap/{{cookiecutter.project_name}}"
documentation = "https://partsnap.github.io/{{cookiecutter.project_name}}/"
readme = "README.md"
packages = [
  {include = "{{cookiecutter.project_slug}}"}
]

[tool.poetry.dependencies]
python = ">=3.11,<3.13"
{% if cookiecutter.database == 'y' -%}
sqlmodel = {extras = ["all"], version = "^0.0.16"}
omegaconf = "^2.3.0"
sqlalchemy-utils = "^0.41.2"
fastapi = {extras = ["all"], version = "^0.110.0"}
typer = "^0.12.3"
types-requests = "^2.31.0.20240406"
{% endif -%}
docker = "^7.1.0"

[tool.poetry.group.dev.dependencies]
pytest = "^7.2.0"
pytest-cov = "^4.0.0"
deptry = "^0.12.0"
mypy = "^1.5.1"
pre-commit = "^3.4.0"
tox = "^4.11.1"
pytest-check = "^2.3.1"
pytest-mock = "^3.14.0"
ruff = "^0.3.4"

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.4.2"
mkdocs-material = "^9.2.7"
mkdocs-mermaid2-plugin = "^1.1.1"
pymdown-extensions = "^10.7.1"
mkdocstrings = {extras = ["python"], version = "^0.23.0"}

[tool.poetry.group.test.dependencies]
pytest-lazy-fixture = "^0.6.3"
nbmake = "^1.5.4"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
files = ["{{cookiecutter.project_slug}}"]
disallow_untyped_defs = "True"
disallow_any_unimported = "True"
no_implicit_optional = "True"
check_untyped_defs = "True"
warn_return_any = "True"
warn_unused_ignores = "True"
show_error_codes = "True"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.ruff]
target-version = "py37"
line-length = 120
fix = true
select = [
    # flake8-2020
    "YTT",
    # flake8-bandit
    "S",
    # flake8-bugbear
    "B",
    # flake8-builtins
    "A",
    # flake8-comprehensions
    "C4",
    # flake8-debugger
    "T10",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # mccabe
    "C90",
    # pycodestyle
    "E", "W",
    # pyflakes
    "F",
    # pygrep-hooks
    "PGH",
    # pyupgrade
    "UP",
    # ruff
    "RUF",
    # tryceratops
    "TRY",
]
ignore = [
    # LineTooLong
    "E501",
    # DoNotAssignLambda
    "E731",
    # F405 `XYZ` may be undefined, or defined from star imports
    "F405",
    # F403 `from xyz import *` used; unable to detect undefined names
    "F403",
]

[tool.ruff.format]
preview = true

[tool.coverage.report]
skip_empty = true

[tool.coverage.run]
branch = true
source = ["{{cookiecutter.project_slug}}"]

[tool.deptry]
ignore = ["DEP003", "DEP001"]
[tool.deptry.per_rule_ignores]
DEP002 = ['types-requests']

[tool.ruff.per-file-ignores]
"tests/*" = ["S101"]
{% if cookiecutter.database == "y"-%}
# Database id otherwise generates this error
"{{cookiecutter.project_slug}}/*" = ["A003"]

[tool.poetry.scripts]
start-server = "{{cookiecutter.project_slug}}.main:start_server_entry_point"
{{cookiecutter.project_slug}} = "{{cookiecutter.project_slug}}.cli:cli_app"
{% endif -%}
